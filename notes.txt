
MapConv dependencies: boost_regex, boost_filesystem, DevIL.

TODO Learn enough about it to let it be able to cache the texture-tiling
stage and just read the height/metal/features back in again.

TODO What does that lowpass algorithm actually do? It looks like it bases
each point of the new heightmap on a weighted average of the twenty-five
point square centered on it, so it'd be a global smooth?

texcompress
------------

Windows uses the same compressor; this is for Linux.

Dependencies: boost_regex, boost_filesystem, DevIL, GL, GLU, GLEW, SDL.

Converts the images given on the commandline (loaded with CBitmap) to the
format required by MapConv, whatever it is. The data is written to
<filename>.raw, which is what Linux mapconv looks for.

Very crude; I copied hunks of SDL and OpenGL code out of rts/ and spent far
too long fiddling with it to make it go, rather than learning the calls.

It depends entirely on the local OpenGL implementation, so the computer
you're compiling maps on probably needs to be able to run Spring, at least a
little.

TODO
 * Check for the type of compression
 * GLX rather than SDL?
 * Compress without bringing up a window. (Though, I figured since we're
   putting up windows, might as well make sure the image isn't completely
   wrong.)

Referred to the GIMP's dds plugin for implementation:

  http://nifelheim.dyndns.org/viewcvs/gimp-dds/trunk/dxt.c?rev=23&view=markup

Spec.:

  http://oss.sgi.com/projects/ogl-sample/registry/ARB/texture_compression.txt

On Debian systems, /usr/share/doc/libglew-dev/glew.html looks
like links to the specification for probably every OpenGL extension GLEW
knows about.

Actual image sizes
-------------------

Texture map: A multiple of 1024 by a (possibly different) multiple of 1024.
An unknown amount of Spring and MapConv depend on map sizes being
divisible by 1024.

Metal map: xsize / 2 by ysize / 2. 
Internally rescaled to that size, so technically any.

Feature map: xsize by ysize.
The featurehandler *might* be trying to rescale each geothermal placement to
deal with odd-sized images. It does it with ints, though, so I'd avoid using
it.

Oops. Also, the fs.txt-feature placement code assumes the featuremap is
one-eighth the size of the map, I think.

The grass placer rescales the featuremap to xsize/4, ysize/4, apparently the
size of the 'grass-map'. It's binary, and random; the brighter the blue, the
more likely you'll get grass there (on *this* run of mapconv). 0 blue
probably disables it, and 255 blue guarantees grass.


Bitmap.cpp, Bitmap.h, byteorder.h, FileHandler.cpp, FileHandler.h,
filefunctions.h, 

  are (often cut-down from) the (ported) ones under rts/. Must remember to
  merge bugfixes when they happen.


With a bit of luck, MapConv will pass into obscurity in a year or two (from
2006).

 * It'd be much easier to make sure heightmaps line up correctly with
   the texturemap using nerd256's interactive editor.

   http://taspring.clan-sy.com/phpbb/viewtopic.php?p=65100#65100

 * This demo of Zaphod's new terrain renderer appears to create a map
   with an image of the heightmap, the tile used on the ground, and the 
   tile used on the mountains. This gives me great hope that a MapConv
   won't be needed at all(!); just pack up your source image files with
   their .smd.

   http://spring.clan-sy.com/phpbb/viewtopic.php?t=3821

These are ready when they're ready, though, so in the mean-time I guess
we still use MapConv.

Proper credit for original source (tarballs!)
----------------------------------------------

0.62b1 spring.clan-sy.com taspring_0.62b1_src.zip 

  Interesting. So MapConv used to be packed with Spring...

Uber   fileuniverse.com   UberMapConv-083105.sd7

  Looks like the original latest release of Mother's mapconv.
  I dunno which is the too-optimized binary and which isn't.

tclap  tclap.sourceforge.net tclap-1.0.5.tar.gz
       http://sourceforge.net/projects/tclap/

  Templatized C++ Command Line Parser. Tarball included 
  to be on the safe side, or something.


Mental note: there's more than 256 colours on the featuremap in samples/1,
so the GIMP will smash information when trying to index it.
